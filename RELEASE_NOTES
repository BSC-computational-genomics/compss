---------------------------
 COMP SUPERSCALAR FRAMEWORK
-----------------------------

COMP Superscalar (COMPSs) is a programming model which aims to ease the development of applications for distributed infrastructures,
such as Clusters, Grids and Clouds. COMP superscalar also features a runtime system that exploits the inherent parallelism of 
applications at execution time.

Release number: 2.3 Daisy
Release date: June-2018
-------------------------------
New features:
         * Runtime:
                 - Persistent storage API implementation based on Redis (distributed as default implementation with COMPSs)
                 - Support for FPGA constraints and reconfiguration scripts
                 - Support for PBS Job Scheduler and the Archer Supercomputer
         * Java:
                 - New API call to delete objects in order to reduce application memory usage

         * Python:
                 - Support for Python 3
                 - Support for Python virtual environments (venv)
                 - Support for running PyCOMPSs as a Python module
                 - Support for tasks returning multiple elements (returns=#)
                 - Automatic import of dummy PyCOMPSs API

         * C:
                 - Persistent worker with Memory-to-memory transfers
                 - Support for arrays (no serialization required)

Improvements:
         - Distribution with docker images
         - Support for sharing objects in memory between tasks (no file serialization is required now with persistent workers)
         - Source Code and example applications distribution on Github
         - Automatic inference of task return 
         - Improved obsolete object cleanup
         - Improved tracing support for applications using persistent memory
         - Improved finalization process to reduce zombie processes
         - Several bug fixes

Known Limitations:
         - Tasks that invoke Numpy and MKL may experience issues if a different MKL threads count is used in different tasks. This is due to the fact that MKL reuses  threads in the different calls and it does not change the number of threads from one call to another.

For further information, please refer to “COMPSs User Manual: Application development guide”.

Please find more details about the COMP Superscalar framework at: 
		http://compss.bsc.es/
