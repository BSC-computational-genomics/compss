#!/bin/bash

#This script builds an application for several applications
#Is used for the C/C++ binding.

#---------------------------------------------------
# SCRIPT CONSTANTS DECLARATION
#---------------------------------------------------
DEFAULT_ARCHITECTURE=$(lscpu | awk 'NR==1{print $NF}')
DEFAULT_CFG=${COMPSS_HOME}/Bindings/c/cfgs/compssrc #This file contains the x86-64 and armhf environment
DEFAULT_ONLY_MASTER=false
DEFAULT_ONLY_WORKER=false

APPLICATION_ERROR="Error: Application name not provided"
ONLY_MASTER_AND_WORKER_ERROR="Error: Is not possible to specify both options --only-master and --only-worker, to compile both remove these arguments."
ARCH_CONFIGURATION_FUNCTION_NOT_FOUND="Error: The function to configurate one of the desired architectures has not been found, ensure that is define in the configuration file."
#---------------------------------------------------
# FUNCTIONS DECLARATION
#---------------------------------------------------
show_supported_archs() {
    cat <<EOT

        * Supported architectures:
            
            x86_64 : Intel 64 bits 
            armhf  : Arm hard float

EOT
# Maybe we support another one, add it on the road
}

show_opts() {
    cat <<EOT

        --supported_arch            Show supported architectures			

        --master=<arch1,arch2,...>  Specifies the target architectures for which the master is
                                    going to be build. Each architecture separated by ",".
                                    Default: ${DEFAULT_ARCHITECTURE}

        --worker=<arch1,arch2,...>  Specifies the target architectures for which the worker is
                                    going to be build. Each architecture separated by ",".
                                    Default: ${DEFAULT_ARCHITECTURE}

        --only-master               Compiles only the master for the specified architectures.

        --only-worker               Compiles only the worker for the specified architectures.

        --cfg=<path>                Specifies the location of the configuration file that contains
                                    the environment to execute when cross-compiling the application.
                                    In this BASH script functions named as the target architecture are
                                    needed to set up the environment.
                                    Default: ${DEFAULT_CFG}

EOT

}

usage() {

        exitValue=$1

        cat <<EOT
Usage: $0 [options] application_name

* Options:
    General:

        --help, -h      Prints this help message

        --opts          Show available options

EOT

	show_opts

    exit "$exitValue"
}

display_error() {
	local error_msg=$1

	echo "$error_msg"
    echo " "

	usage 1
}

get_args() {
        while getopts h-: flag; do
            case "$flag" in
                   h)
                        #Display help message
                        usage 0
                        ;;
                   -)
                        #The rest of possible arguments that did not match
                        case "$OPTARG" in
                            help)
                                #Display help
                                usage 0
                                ;;
                            opts)
                                #Display opts
                                show_opts
                                exit 0
                                ;;
                            supported_arch)
                                #Display supported architectures
                                show_supported_archs
                                exit 0
                                ;;
                            master=*)
                                #Get architectures to build master
                                MASTER_BUILD_ARCHS=${OPTARG//master=/}
                                ;;
                            worker=*)
                                #Get architectures to build worker
                                WORKER_BUILD_ARCHS=${OPTARG//worker=/}
                                ;;
                            only-master)
							    #Compile only the master
							    ONLY_MASTER=true
							    ;;
                            only-worker)
                                #Compile only the worker
                                ONLY_WORKER=true
                                ;;
							cfg=*)
                                #Get configuration file
                                CFG_PATH=${OPTARG//cfg=/}
                                ;;
                            *)
                                # Flag didn't match any pattern. Raise exception
                                display_error "Bad argument: $OPTARG"
                                ;;
                            esac
                            ;;
                      *)
                        break
                        ;;
            esac
        done

        # Shift COMPSs arguments
        shift $((OPTIND-1))

        # Parse application name
        if [[ $# -eq 0 ]]; then
            display_error "${APPLICATION_ERROR}"
        else
            other_args=$*
        fi

}

check_args() {

    if [ -z "$CFG_PATH" ]; then
        echo "[ INFO ] Using default configuration file: ${DEFAULT_CFG}."
        CFG_PATH=${DEFAULT_CFG}
    fi

	if [ -n "$ONLY_MASTER" ] && [ -n "$ONLY_WORKER" ]; then
        echo ""
		display_error "${ONLY_MASTER_AND_WORKER_ERROR}" #Is not possible to compile only both...
	elif [ -n "$ONLY_MASTER" ]; then
		echo "[ INFO ] Buildiling only the master."
		ONLY_WORKER=$DEFAULT_ONLY_WORKER
	else
		echo "[ INFO ] Buildiling only the worker."
		ONLY_MASTER=$DEFAULT_ONLY_MASTER
	fi
    
    if [ -z "$MASTER_BUILD_ARCHS" ] && [ "$ONLY_WORKER" = false ]; then
        echo "[ INFO ] Using default architecture to build master: ${DEFAULT_ARCHITECTURE}."
        MASTER_BUILD_ARCHS=${DEFAULT_ARCHITECTURE}
    fi

    if [ -z "$WORKER_BUILD_ARCHS" ] && [ "$ONLY_MASTER" = false ]; then
        echo "[ INFO ] Using default architecture to build worker: ${DEFAULT_ARCHITECTURE}."
        WORKER_BUILD_ARCHS=${DEFAULT_ARCHITECTURE}
    fi
        
}

extract_archs() {
	
	local toProcess

	# This function uses awk to get the first element of a string until the first comma separator
	toProcess=$1

	processed=$(echo $toProcess | awk -F, '{split($0, array,",")} END{ for (i in array) { print array [i] }}')

}

#---------------------------------------------------
# MAIN EXECUTION
#---------------------------------------------------

    # Arguments

    get_args "$@"
    check_args

    appdir=$(pwd)
    tmpdir=$(mktemp -d)
    
    cp -rf $appdir/* $tmpdir

    # Build master
    if [ "$ONLY_WORKER" = false ]; then

        if [ -d ./master ] ; then
            echo "The master directory already exists from a previous build. Removing."
            rm -rf master
        fi

        mkdir master

        extract_archs $MASTER_BUILD_ARCHS
        
        source $CFG_PATH #This file contains the build configuration

        cd $tmpdir

        for i in $processed; do
            
            if [ ! $(type -t $i) = "function" ]; then
                display_error "${ARCH_CONFIGURATION_FUNCTION_NOT_FOUND}"
            fi

            $i #Function to export al the needed env. variables
            
            compss_build_app --only-master $other_args 

            ev=$?

            if [ $ev -ne 0 ]; then
                exit 1
            fi

            mkdir $appdir/master/$i
            mv ./master/* $appdir/master/$i

        done

    fi    		

    # Build worker
    if [ "$ONLY_MASTER" = false ]; then
        
        if [ -d ./worker ] ; then
            echo "The worker directory already exists from a previous build. Removing."
            rm -rf worker
        fi

        mkdir worker

        extract_archs $WORKER_BUILD_ARCHS

        source $CFG_PATH

        cd $tmpdir
        
        for i in $processed; do

            if [ ! $(type -t $i) = "function" ]; then
                display_error "${ARCH_CONFIGURATION_FUNCTION_NOT_FOUND}"
            fi

            $i #Function to export al the needed env. variables

            compss_build_app --only-worker $other_args

            ev=$?

            if [ $ev -ne 0 ]; then
                exit 1
            fi

            mkdir $appdir/worker/$i
            mv ./worker/* $appdir/worker/$i

        done

    fi

    rm -rf $tmpdir

    exit 0
